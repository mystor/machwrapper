#!/bin/bash

# Locate the mach executable
DIR="$PWD"
while [[ ! -e "$DIR/mach" ]]; do
    if [[ "$DIR" == '/' ]]; then
        echo "ERROR: unable to locate mach in this directory or parent directories" >&2
        exit 1
    fi
    DIR=$(dirname "$DIR")
done
MACH="$DIR/mach"
TREE=$(basename "$DIR")

# If we are looking at servo's mach, we don't need mozconfigs, so skip the rest
# of this file
if [[ -e "$DIR/servobuild.example" ]]; then
    "$MACH" $*
    exit $?
fi

if [[ $MOZCONFIG ]]; then
    "$MACH" $*
    exit $?
fi

# Change which mozconfig is currently active, if that is specified
if [[ $# == "1" && -e "$HOME/.mozconfigs/$1" ]]; then
    echo "$HOME/.mozconfigs/$1" > "$HOME/.mozconfigs/__current__/$TREE"
    echo "UPDATED: $TREE => $1" >&2
    exit 0
fi

# Check if we have a selected mozconfig for this tree
if [[ ! -e "$HOME/.mozconfigs/__current__/$TREE" ]]; then
   echo "ERROR: $TREE => unspecified. Aborting." >&2
   exit 1
fi
export MOZCONFIG=$(cat "$HOME/.mozconfigs/__current__/$TREE")

# Check if `icecc` is mentioned in the mozconfig to decide whether or not to set
# -j when building
ICECC=no
if grep -q 'icecc' "$MOZCONFIG"; then
    ICECC=yes
fi

# Run mach
echo "Found $TREE => $(basename $MOZCONFIG) (icecc=$ICECC)" >&2
echo

# If we are building with icecc, set -j`icecc-jobs`!
if [[ "$1" == "build" && "$ICECC" == "yes" ]]; then
    shift
    "$MACH" build -j`icesched -j` $*
    exit $?
fi

"$MACH" $*
exit $?
